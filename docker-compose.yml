version: '3.8'

services:
  # Development configuration - mounts local files, no build
  app-dev:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - .:/app
    ports:
      - '3000:3000'
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USERNAME=${DB_USERNAME:-telegram_bot}
      - DB_PASSWORD=${DB_PASSWORD:-password}
    command: >
      sh -c "npm install --legacy-peer-deps && npm run start:dev"
    restart: unless-stopped

  # Production configuration - builds from Dockerfile
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USERNAME=${DB_USERNAME:-telegram_bot}
      - DB_PASSWORD=${DB_PASSWORD:-password}
    restart: unless-stopped
    profiles: ['prod']

  # Database service (shared between dev and prod)
  db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password --bind-address=0.0.0.0
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: telegram_bot
      MYSQL_USER: 'telegram_bot'
      MYSQL_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - '3307:3306'
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db/init:/docker-entrypoint-initdb.d

volumes:
  mysql_data:
