name: Deploy to VPS

on:
  push:
    branches: [main] # или master, в зависимости от названия вашей основной ветки

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
      ENCRYPTION_IV: ${{ secrets.ENCRYPTION_IV }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      APP_URL: ${{ secrets.APP_URL }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}

    steps:
      - uses: actions/checkout@v2

      - name: Create .env file
        run: |
          cat > .env << EOF
          TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
          ENCRYPTION_KEY=${ENCRYPTION_KEY}
          ENCRYPTION_IV=${ENCRYPTION_IV}
          DB_HOST=db
          DB_PORT=3306
          DB_USERNAME=${DB_USERNAME}
          DB_PASSWORD=${DB_PASSWORD}
          DB_DATABASE=telegram_bot
          DB_SYNCHRONIZE=true
          APP_URL=${APP_URL}
          NODE_ENV=production
          MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
          EOF

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: '.,!node_modules'
          target: '/home/Projects/telegram-email-forwarder'

      - name: Deploy application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/Projects/telegram-email-forwarder
            docker-compose down

            # Удаляем том с данными MySQL для гарантированного применения инициализационных скриптов
            docker volume rm telegram-email-forwarder_mysql_data || true

            # Запускаем только базу данных сначала
            docker-compose up -d --build db

            # Даем базе данных время на инициализацию (30 секунд)
            echo "Waiting for database to initialize (30 seconds)..."
            sleep 30

            # Проверяем статус базы данных
            echo "Checking database status..."
            docker-compose logs db | tail -n 50

            # Пробуем подключиться к базе данных из хост-системы
            echo "Testing database connection..."
            docker-compose exec db mysqladmin -u telegram_bot -p"${DB_PASSWORD}" ping || echo "Failed to connect to database"

            # Запускаем приложение
            echo "Starting application container..."
            docker-compose up -d --build app-prod

            # Даем приложению время на запуск (10 секунд)
            echo "Waiting for application to start (10 seconds)..."
            sleep 10

            # Выводим логи приложения
            echo "Application logs:"
            docker-compose logs app-prod | tail -n 50
